[
    {
        "filename": "Matrix_Problem.py",
        "program": "from collections import deque\\n\\n\\nclass Dinic:\\n    def __init__(self, N):\\n        self.N = N\\n        self.G = [[] for i in range(N)]\\n\\n    def add_edge(self, fr, to, cap):\\n        forward = [to, cap, None]\\n        forward[2] = backward = [fr, 0, forward]\\n        self.G[fr].append(forward)\\n        self.G[to].append(backward)\\n\\n    def add_multi_edge(self, v1, v2, cap1, cap2):\\n        edge1 = [v2, cap1, None]\\n        edge1[2] = edge2 = [v1, cap2, edge1]\\n        self.G[v1].append(edge1)\\n        self.G[v2].append(edge2)\\n\\n    def bfs(self, s, t):\\n        self.level = level = [None]*self.N\\n        deq = deque([s])\\n        level[s] = 0\\n        G = self.G\\n        while deq:\\n            v = deq.popleft()\\n            lv = level[v] + 1\\n            for w, cap, _ in G[v]:\\n                if cap and level[w] is None:\\n                    level[w] = lv\\n                    deq.append(w)\\n        return level[t] is not None\\n\\n    def dfs(self, v, t, f):\\n        if v == t:\\n            return f\\n        level = self.level\\n        for e in self.it[v]:\\n            w, cap, rev = e\\n            if cap and level[v] < level[w]:\\n                d = self.dfs(w, t, min(f, cap))\\n                if d:\\n                    e[1] -= d\\n                    rev[1] += d\\n                    return d\\n        return 0\\n\\n    def flow(self, s, t):\\n        flow = 0\\n        INF = 10**9 + 7\\n        G = self.G\\n        while self.bfs(s, t):\\n            *self.it, = map(iter, self.G)\\n            f = INF\\n            while f:\\n                f = self.dfs(s, t, INF)\\n                flow += f\\n        return flow\\n\\n\\nH, W = map(int, input().split())\\nN = H + W\\nstart, goal = N, N + 1\\nN += 2\\nX = [list(map(int, input().split())) for _ in range(H)]\\nA = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\nmx_flow = Dinic(N)\\nfor i in range(H):\\n    for j in range(W):\\n        v, w = i, j + H\\n        mx_flow.add_edge(v, w, 1)\\nfor i, a in enumerate(A):\\n    v, w, c = start, i, a\\n    mx_flow.add_edge(v, w, c)\\nfor j, b in enumerate(B):\\n    v, w, c = j + H, goal, b\\n    mx_flow.add_edge(v, w, c)\\nf = mx_flow.flow(start, goal)\\nif not (f == sum(A) and sum(A) == sum(B)):\\n    print(-1)\\n    exit()\\n# print(f)\\n\\n\\n\\n\\ndef add_edge(v, w, cap, cost):\\n    g[v].append([w, cap, cost, len(g[w])])\\n    g[w].append([v, 0, -cost, len(g[v]) - 1])\\n\\n\\ng = [[] for _ in range(N)]\\nfor i in range(H):\\n    for j in range(W):\\n        v, w = i, j + H\\n        if X[i][j]:\\n            add_edge(v, w, 1, 0)\\n        else:\\n            add_edge(v, w, 1, 1)\\nfor i, a in enumerate(A):\\n    v, w, c = start, i, a\\n    add_edge(v, w, c, 0)\\nfor j, b in enumerate(B):\\n    v, w, c = j + H, goal, b\\n    add_edge(v, w, c, 0)\\n\\ninf = 10 ** 18\\n\\n\\ndef min_cost_flow(s, t, f):\\n    res = 0\\n    prevv = [0] * N\\n    preve = [0] * N\\n    while f:\\n        dist = [inf] * N\\n        dist[s] = 0\\n        update = True\\n        while update:\\n            update = False\\n            for v in range(N):\\n                if dist[v] == inf:\\n                    continue\\n                for i, (w, cap, cost, j) in enumerate(g[v]):\\n                    if cap > 0 and dist[w] > dist[v] + cost:\\n                        dist[w] = dist[v] + cost\\n                        prevv[w] = v\\n                        preve[w] = i\\n                        update = True\\n        if dist[t] == inf:\\n            return -1\\n        d = f\\n        v = t\\n        while v != s:\\n            d = min(d, g[prevv[v]][preve[v]][1])\\n            v = prevv[v]\\n        f -= d\\n        res += d * dist[t]\\n        v = t\\n        while v != s:\\n            w, cap, cost, j = g[prevv[v]][preve[v]]\\n            g[prevv[v]][preve[v]][1] -= d\\n            g[v][j][1] += d\\n            v = prevv[v]\\n    return res\\n\\n\\nmin_cost_flow(start, goal, f)\\nY = [[0] * W for _ in range(H)]\\nfor v in range(H):\\n    for w, cap, cost, j in g[v]:\\n        if 0 <= v < H and 0 <= w - H < W and not cap:\\n            Y[v][w - H] = 1\\nans = 0\\nfor i in range(H):\\n    for j in range(H):\\n        if X[i][j] != Y[i][j]:\\n            ans += 1\\n    # print(*Y[i])\\nprint(ans)\\n# for i in range(N):\\n#     print(g[i])"
    }
]